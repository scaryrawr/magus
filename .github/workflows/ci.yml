name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

# Automatically cancel previous runs for the same workflow on the same branch/PR
concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  ci:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Check formatting
        run: |
          bun format
          if ! git diff --exit-code; then
            echo "‚ùå Code is not properly formatted. Please run 'bun format' and commit the changes."
            git diff
            exit 1
          else
            echo "‚úÖ Code formatting is correct"
          fi

      - name: Run typecheck
        run: bun typecheck

      - name: Run linting
        run: bun lint

      - name: Run tests with coverage
        run: bun test --coverage --coverage-reporter=lcov

      - name: Generate coverage report
        run: |
          # Check if coverage output exists
          if [ -f "coverage/lcov.info" ]; then
            # Parse LCOV format to get coverage percentage
            COVERAGE=$(node -e "
              const fs = require('fs');
              const lcov = fs.readFileSync('coverage/lcov.info', 'utf8');
              
              // Parse LCOV format for line coverage
              const lines = lcov.split('\n');
              let totalLines = 0;
              let coveredLines = 0;
              
              for (const line of lines) {
                if (line.startsWith('LF:')) {
                  totalLines += parseInt(line.split(':')[1] || '0');
                } else if (line.startsWith('LH:')) {
                  coveredLines += parseInt(line.split(':')[1] || '0');
                }
              }
              
              const percentage = totalLines > 0 ? ((coveredLines / totalLines) * 100) : 0;
              console.log(percentage.toFixed(2));
            ")
            
            # Determine badge color
            COLOR=$(node -e "
              const coverage = parseFloat('$COVERAGE');
              if (coverage >= 80) console.log('brightgreen');
              else if (coverage >= 60) console.log('yellow');
              else console.log('red');
            ")
            
            echo "üìä Code Coverage: ${COVERAGE}%"
            echo "üé® Badge color: ${COLOR}"
            echo "COVERAGE_PERCENT=${COVERAGE}" >> $GITHUB_ENV
            echo "BADGE_COLOR=${COLOR}" >> $GITHUB_ENV
          else
            echo "‚ùå Coverage file not found"
            echo "COVERAGE_PERCENT=0" >> $GITHUB_ENV
            echo "BADGE_COLOR=red" >> $GITHUB_ENV
          fi

      - name: Comment coverage on PR
        if: github.event_name == 'pull_request'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          COVERAGE_PERCENT="${{ env.COVERAGE_PERCENT }}"
          BADGE_COLOR="${{ env.BADGE_COLOR }}"
          PR_NUMBER="${{ github.event.number }}"

          if [ "$COVERAGE_PERCENT" != "" ]; then
            # Determine emoji based on coverage
            if (( $(echo "$COVERAGE_PERCENT >= 80" | bc -l) )); then
              EMOJI="üü¢"
            elif (( $(echo "$COVERAGE_PERCENT >= 60" | bc -l) )); then
              EMOJI="üü°"
            else
              EMOJI="üî¥"
            fi
            
            # Determine status text
            if [ "$BADGE_COLOR" = "brightgreen" ]; then
              STATUS="‚úÖ Excellent"
            elif [ "$BADGE_COLOR" = "yellow" ]; then
              STATUS="‚ö†Ô∏è Needs Improvement"
            else
              STATUS="‚ùå Poor"
            fi
            
            # Create coverage comment
            gh pr comment $PR_NUMBER --body "## ${EMOJI} Code Coverage Report

            üìä **Coverage**: ${COVERAGE_PERCENT}%

            | Metric | Result |
            |--------|--------|
            | Statement Coverage | ${COVERAGE_PERCENT}% |
            | Status | ${STATUS} |

            > Coverage report generated by CI workflow"
          else
            gh pr comment $PR_NUMBER --body "## ‚ùå Coverage Report Failed

            Unable to generate coverage report. Please check the CI logs for details."
          fi

      - name: Build project
        run: bun run build

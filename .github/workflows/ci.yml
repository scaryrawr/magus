name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

# Automatically cancel previous runs for the same workflow on the same branch/PR
concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  ci:
    # Run CI on all major OSes
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}

    # Ensure a consistent shell across platforms
    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Check formatting
        run: |
          bun format
          if ! git diff --exit-code; then
            echo "❌ Code is not properly formatted. Please run 'bun format' and commit the changes."
            git diff
            exit 1
          else
            echo "✅ Code formatting is correct"
          fi

      - name: Run typecheck
        run: bun typecheck

      - name: Run linting
        run: bun lint

      - name: Run tests with coverage
        run: bun test:coverage

      - name: Generate coverage report
        run: |
          # Check if coverage output exists
          if [ -f "coverage/lcov.info" ]; then
            # Parse LCOV format to get coverage percentage
            COVERAGE=$(node -e "
              const fs = require('fs');
              const lcov = fs.readFileSync('coverage/lcov.info', 'utf8');
              
              // Parse LCOV format for line coverage
              const lines = lcov.split('\n');
              let totalLines = 0;
              let coveredLines = 0;
              
              for (const line of lines) {
                if (line.startsWith('LF:')) {
                  totalLines += parseInt(line.split(':')[1] || '0');
                } else if (line.startsWith('LH:')) {
                  coveredLines += parseInt(line.split(':')[1] || '0');
                }
              }
              
              const percentage = totalLines > 0 ? ((coveredLines / totalLines) * 100) : 0;
              console.log(percentage.toFixed(2));
            ")
            
            # Determine badge color
            COLOR=$(node -e "
              const coverage = parseFloat('$COVERAGE');
              if (coverage >= 80) console.log('brightgreen');
              else if (coverage >= 60) console.log('yellow');
              else console.log('red');
            ")
            
            echo "📊 Code Coverage: ${COVERAGE}%"
            echo "🎨 Badge color: ${COLOR}"
            echo "COVERAGE_PERCENT=${COVERAGE}" >> $GITHUB_ENV
            echo "BADGE_COLOR=${COLOR}" >> $GITHUB_ENV
          else
            echo "❌ Coverage file not found"
            echo "COVERAGE_PERCENT=0" >> $GITHUB_ENV
            echo "BADGE_COLOR=red" >> $GITHUB_ENV
          fi

      - name: Package coverage artifacts
        # Always try to package even if coverage file is missing; tolerate missing files
        run: |
          mkdir -p coverage-artifact
          echo -n "${COVERAGE_PERCENT:-0}" > coverage-artifact/coverage_percent.txt
          echo -n "${BADGE_COLOR:-red}" > coverage-artifact/badge_color.txt
          if [ -f "coverage/lcov.info" ]; then
            cp coverage/lcov.info coverage-artifact/lcov.info
          fi

      - name: Upload coverage artifacts
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ matrix.os }}
          path: coverage-artifact
          if-no-files-found: warn

      - name: Build project
        run: bun run build

  coverage-summary:
    name: Coverage summary
    runs-on: ubuntu-latest
    needs: ci
    steps:
      - name: Download coverage artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: coverage-*
          path: artifacts
          merge-multiple: false

      - name: Build coverage report and add to summary
        run: |
          node -e '
            const fs = require("fs");
            const path = require("path");
            const root = path.resolve("artifacts");
            let entries = [];
            if (fs.existsSync(root)) {
              for (const name of fs.readdirSync(root)) {
                if (!name.startsWith("coverage-")) continue;
                const dir = path.join(root, name);
                const os = name.replace(/^coverage-/, "");
                let percent = null;
                let color = null;
                const percentFile = path.join(dir, "coverage_percent.txt");
                const colorFile = path.join(dir, "badge_color.txt");
                try {
                  if (fs.existsSync(percentFile)) {
                    percent = parseFloat(fs.readFileSync(percentFile, "utf8").trim());
                  }
                } catch {}
                try {
                  if (fs.existsSync(colorFile)) {
                    color = fs.readFileSync(colorFile, "utf8").trim();
                  }
                } catch {}
                // Fallback: compute from lcov if needed
                if (!Number.isFinite(percent)) {
                  const lcovPath = path.join(dir, "lcov.info");
                  if (fs.existsSync(lcovPath)) {
                    const lcov = fs.readFileSync(lcovPath, "utf8");
                    let total = 0, hit = 0;
                    for (const line of lcov.split(/\n/)) {
                      if (line.startsWith("LF:")) total += parseInt(line.split(":")[1]||"0",10);
                      else if (line.startsWith("LH:")) hit += parseInt(line.split(":")[1]||"0",10);
                    }
                    percent = total>0 ? (hit/total)*100 : 0;
                  } else {
                    percent = 0;
                  }
                }
                if (!color) {
                  color = percent>=80?"brightgreen":percent>=60?"yellow":"red";
                }
                const emoji = percent>=80?"🟢":percent>=60?"🟡":"🔴";
                const status = color==="brightgreen"?"✅ Excellent":color==="yellow"?"⚠️ Needs Improvement":"❌ Poor";
                entries.push({ os, percent: Number(percent.toFixed(2)), emoji, status });
              }
            }
            entries.sort((a,b)=>a.os.localeCompare(b.os));
            let avg = entries.length? entries.reduce((s,e)=>s+e.percent,0)/entries.length : 0;
            const overallEmoji = avg>=80?"🟢":avg>=60?"🟡":"🔴";
            const lines = [];
            lines.push(`## ${overallEmoji} Code Coverage Report`);
            lines.push("");
            lines.push(`📊 Overall Coverage: ${avg.toFixed(2)}%`);
            lines.push("");
            if (entries.length) {
              lines.push("| OS | Coverage | Status |");
              lines.push("|----|----------|--------|");
              for (const e of entries) {
                lines.push(`| ${e.os} | ${e.percent}% | ${e.emoji} ${e.status} |`);
              }
            } else {
              lines.push("No coverage artifacts found.");
            }
            lines.push("");
            lines.push("> Coverage report generated by CI workflow");
            fs.writeFileSync("body.md", lines.join("\n"));
          '
          cat body.md >> "$GITHUB_STEP_SUMMARY"
